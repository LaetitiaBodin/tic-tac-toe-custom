{"version":3,"sources":["components/SetUp.js","components/Round.js","index.js"],"names":["SetUp","base","cells","setParams","cellmatches","btns","i","push","onClick","num","j","pickSize","className","Canvas","play","winner","canvasRef","React","useRef","width","height","ref","Round","params","useState","setWinner","counter","setCounter","history","setHistory","moves","ctx","canvas","current","context","getContext","setTimeout","beginPath","strokeStyle","lineCap","lineWidth","moveTo","lineTo","stroke","fillStyle","arc","Math","PI","fill","drawO","length","arr","cellsAreSame","reduce","a","b","NaN","isGameOver","canvases","key","style","gridTemplateColumns","window","location","reload","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67f11122.chunk.js","sourcesContent":["export const SetUp = ({setParams}) => {\r\n\r\n    let base // Number of cells on each row (player's choice)\r\n    let cells // Total number of cells\r\n    let cellmatches = [] // Cell numbers used to evaluate the moves made (used to end the game and declare a winner)\r\n\r\n    // Grid size setup\r\n    function pickSize (num) {\r\n\r\n        base = num\r\n        cells = num * num\r\n\r\n        for (let i = 0; i < base * 2 + 2; i++) {\r\n            cellmatches[i] = []\r\n        }\r\n\r\n        for (let i = 0; i < base; i++) {\r\n            for (let j = 0; j < base; j++) {\r\n                cellmatches[i].push(i * base + j) // Matches row cells\r\n                cellmatches[i + base].push(i + base * j) // Matches column cells\r\n            }\r\n            cellmatches[base * 2].push(i * (base + 1)) // Matches diagonal cells from top left to bottom right\r\n            cellmatches[base * 2 + 1].push(i * (base - 1) + (base - 1)) // Matches diagonal cells from top right to bottom left\r\n        }\r\n\r\n        setParams({\r\n            base: base,\r\n            cells: cells,\r\n            cellmatches: cellmatches\r\n        })\r\n        \r\n    }\r\n\r\n    const btns = []\r\n    for (let i = 3; i <= 10; i++) {\r\n        btns.push (<button key={`setup--btn_${i}`} onClick={() => pickSize(i)}>{i} x {i}</button>)\r\n    }\r\n\r\n    return (\r\n        <div className='setup--block'>\r\n            <p>Please select a grid size.</p>\r\n            <div className='setup--btns'>\r\n                {btns}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\n// X move (animated)\r\nfunction drawX (ctx) {\r\n\r\n    setTimeout(() => {\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#3d5a80'\r\n        ctx.lineCap = 'round'\r\n        ctx.lineWidth = 20\r\n        ctx.moveTo(30, 30)\r\n        for (let i = 0; i <= 90; i++) {\r\n            setTimeout(() => {\r\n                ctx.lineTo(30 + i, 30 + i)\r\n                ctx.stroke()\r\n            }, i * 3, i)\r\n        }\r\n    }, 0)\r\n\r\n    setTimeout(() => {\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#3d5a80'\r\n        ctx.lineCap = 'round'\r\n        ctx.lineWidth = 20\r\n        ctx.moveTo(120, 30)\r\n        for (let i = 0; i <= 90; i++) {\r\n            setTimeout(() => {\r\n                ctx.lineTo(120 - i, 30 + i)\r\n                ctx.stroke()\r\n            }, i * 3, i)\r\n        }\r\n    }, 300)\r\n\r\n}\r\n\r\n// O move (animated)\r\nfunction drawO (ctx) {\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n        setTimeout(() => {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = '#ee6c4d'\r\n            ctx.moveTo(75, 75)\r\n            ctx.arc(75, 75, 55,  Math.PI * 1.5 , Math.PI * 1.5 - i / Math.PI / 5, true)\r\n            ctx.moveTo(75, 75)\r\n            ctx.fill()\r\n            ctx.beginPath();\r\n            ctx.fillStyle = '#e0fbfc'\r\n            ctx.moveTo(75, 75)\r\n            ctx.arc(75, 75, 35,  Math.PI * 1.5 , Math.PI * 1.5 - i / Math.PI / 5, true)\r\n            ctx.moveTo(75, 75)\r\n            ctx.fill()\r\n        }, i * 6, i)\r\n    }\r\n\r\n}\r\n\r\n// 1 canvas = 1 playing square\r\nconst Canvas = ({i, play, winner}) => {\r\n\r\n    const canvasRef = React.useRef(null)\r\n\r\n    const canvasClass = () => winner ? 'filled' : null // Once the game is over, all the playing squares have full opacity\r\n    \r\n    return <canvas className={canvasClass()} width={150} height={150} key={`canvas_${i}`} ref={canvasRef} onClick={() => play(i, canvasRef)} />\r\n\r\n}\r\n  \r\nexport const Round = ({params}) => {\r\n\r\n    const [winner, setWinner] = React.useState(null) // Used for endgame animation and replay button's display\r\n    const [counter, setCounter] = React.useState(0) // Used to indicate which player is playing\r\n    const [history, setHistory] = React.useState([]) // Used to store the moves made\r\n\r\n    let moves = [...history] // Array used to update history and check for a possible winner\r\n    \r\n    function play (i, canvasRef) {\r\n\r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext('2d')\r\n        \r\n        if (!winner && !moves[i]) {\r\n\r\n            if (counter % 2 === 0) {\r\n                moves[i] = 'X'\r\n                drawX(context)\r\n            } else if (counter % 2 === 1) {\r\n                moves[i] = 'O'\r\n                drawO(context)\r\n            }\r\n            \r\n            canvas.className = 'filled'\r\n            setCounter(counter + 1)\r\n            setHistory(moves)\r\n            isGameOver()\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function isGameOver () {\r\n\r\n        let winner = null\r\n\r\n        if (counter === params.cells - 1) {\r\n            winner = `IT'S A DRAW...`\r\n        }\r\n        \r\n        for (let i = 0; i < params.cellmatches.length; i++) {\r\n    \r\n            let arr = []\r\n            for (let j = 0; j < params.base; j++) {\r\n                arr.push(moves[params.cellmatches[i][j]])\r\n            }\r\n\r\n            // All the elements in the array are the same. True or false ?\r\n            let cellsAreSame = !!arr.reduce(function (a, b) { return (a === b) ? a : NaN })\r\n\r\n            if (arr[0] && cellsAreSame) {\r\n                arr[0] === 'X' ? winner = `PLAYER 1 WINS!` : winner = `PLAYER 2 WINS!`\r\n            }\r\n\r\n        }\r\n        \r\n        setWinner(winner)\r\n\r\n    }\r\n\r\n    let canvases = []\r\n    for (let i = 0; i < params.cells; i++) {\r\n        canvases.push(<Canvas {...{i, play, winner}} key={`canvas_${i}`}/>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='game--board' style={{gridTemplateColumns: `repeat(${params.base}, 1fr)`}}>\r\n                {canvases}\r\n            </div>\r\n            <div className='game--info'>\r\n                {!winner\r\n                    ?   <p>TURN: PLAYER {counter % 2 + 1}</p>\r\n                    :   <>\r\n                            <p>{winner}</p>\r\n                            <button onClick={() => window.location.reload()}>REPLAY</button>\r\n                        </>}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport './index.css'\r\n\r\nimport { SetUp } from './components/SetUp'\r\nimport { Round } from './components/Round'\r\n\r\nconst App = () => {\r\n    const [params, setParams] = React.useState(null) // Used to customize the game's parameters\r\n    return (\r\n        <div>\r\n            <h1>TIC-TAC-TOE</h1>\r\n            {\r\n                !params\r\n                    ?   <SetUp {...{setParams}}/>\r\n                    :   <Round {...{params}}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}